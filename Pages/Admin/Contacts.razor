@page "/admin/contacts"

@layout MainLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3 style="margin-left:-2px; margin-bottom:15px">My Contacts</h3>

<div class="container-fluid d-flex justify-content-center" style="margin-left:-25px">
    <div class="card p-3 shadow-lg" style="width: 1000px; height: 440px">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="d-flex align-items-center">
                <input type="text" class="form-control me-2" placeholder="Search..." style="width: 250px;" />
                <button class="btn btn-secondary">Clear</button>
            </div>
            <button class="btn btn-success" @onclick="CreateContact">Create Contact</button>
        </div>

        @if (userList == null || !userList.Any())
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <table class="table table-striped table-hover table-responsive">
                <thead class="table-light">
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Address</th>
                        <th>Created On</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in userList)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>
                            <td>@user.Email</td>
                            <td>@user.PhoneNumber</td>
                            <td>@user.Address</td>
                            <td>@user.CreatedAt.UtcDateTime.ToString("yyyy-MM-dd")</td>
                            <td>
                                <div class="d-flex">
                                    <button class="btn btn-sm me-2" title="View Details">
                                        <i class="bi bi-folder-fill"></i>
                                    </button>
                                    <button class="btn btn-sm me-2" title="Edit">
                                        <i class="bi bi-pen-fill"></i>
                                    </button>
                                    <button class="btn btn-sm" title="Delete" @onclick="() => ConfirmDelete(user.Id)">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal show d-block align-content-center" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this contact?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUserAsync">Delete</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private IEnumerable<UserModel> userList = Enumerable.Empty<UserModel>();
    private bool isLoading = true;
    private bool showDeleteModal = false;
    private int userIdToDelete;

    protected override async Task OnInitializedAsync() => await LoadUsersAsync();

    private async Task LoadUsersAsync()
    {
        await Task.Delay(1000);
        if (AppSettings.APIUrl != null)
            userList = await Http.GetFromJsonAsync<UserModel[]>($"{AppSettings.APIUrl}/contact");
        isLoading = false;
    }

    private async Task DeleteUserAsync()
    {
        if (AppSettings.APIUrl != null)
            await Http.DeleteAsync($"{AppSettings.APIUrl}/contact/{userIdToDelete}");
        showDeleteModal = false;
        await LoadUsersAsync();
    }

    private void ConfirmDelete(int id)
    {
        userIdToDelete = id;
        showDeleteModal = true;
    }

    private void CancelDelete() => showDeleteModal = false;

    public class UserModel
    {
        public int Id { get; set; }
        public string? DisplayName { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? PhoneNumber { get; set; }
        public string? WhatsApp { get; set; }
        public string? Address { get; set; }
        public string Role { get; set; }
        public Guid Guid { get; set; }
        public string? Description { get; set; }
        public DateTimeOffset CreatedAt { get; set; }
    }

    private void CreateContact()
    {
        NavigationManager.NavigateTo("/admin/contacts/create");
    }
}