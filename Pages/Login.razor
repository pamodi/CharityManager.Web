@page "/"
@using System.ComponentModel.DataAnnotations
@layout LoginLayout
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<section class="bg-light d-flex align-items-center min-vh-100">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 col-xl-9">
                <div class="card border-light-subtle shadow-sm overflow-hidden">
                    <div class="row g-0">
                        <!-- Image Section -->
                        <div class="col-md-6 d-none d-md-block">
                            <img class="img-fluid w-100 h-100 object-fit-cover" loading="lazy" src="./assets/img/Login.jpg" alt="Welcome!">
                        </div>

                        <!-- Login Form Section -->
                        <div class="col-12 col-md-6 d-flex align-items-center p-4">
                            <div class="w-100">
                                <div class="text-center mb-3">
                                    <img src="./assets/img/Logo.jpg" alt="Logo" width="175" height="57">
                                </div>
                                <h4 class="text-center">Welcome!</h4>
                                <p class="text-center text-muted">Sign in to continue</p>

                                <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                                    <DataAnnotationsValidator />
                                    <div class="mb-3">
                                        <label class="form-label">Username</label>
                                        <InputText class="form-control" @bind-Value="loginRequest.Username" placeholder="Enter username" required />
                                        <ValidationMessage For="@(() => loginRequest.Username)" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Password</label>
                                        <InputText class="form-control" @bind-Value="loginRequest.Password" type="password" placeholder="Enter password" required />
                                        <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
                                    </div>
                                    <div class="d-grid">
                                        <button class="btn btn-dark btn-md" type="submit">LOGIN</button>
                                    </div>
                                </EditForm>

                                <div class="text-center mt-3">
                                    <a href="#" class="text-decoration-none text-secondary">Forgot password?</a>
                                </div>

                                @if (errorMessage != null)
                                {
                                    <div class="alert alert-danger mt-3 text-center">@errorMessage</div>
                                }

                                <div class="text-center mt-4 text-muted" style="font-size:small">
                                    <small>&copy; @DateTime.UtcNow.Year | Developed by <strong><em>Pamodi Rathnayake</em></strong></small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private LoginRequest loginRequest = new LoginRequest("", "");
    private string errorMessage = null;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"{AppSettings.APIUrl}/auth/login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result == null || !result.IsSuccess)
                {
                    errorMessage = result?.Message ?? "Invalid username or password.";
                    return;
                }
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "role", result.Role);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "name", result.DisplayName);
                Navigation.NavigateTo(result.Role == "ADMIN" ? "/admin/home" : "/user/home");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }

    private class LoginRequest
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }

        public LoginRequest(string username, string password)
        {
            Username = username;
            Password = password;
        }
    }

    private class LoginResponse
    {
        public bool IsSuccess { get; set; }
        public string DisplayName { get; set; }
        public string Role { get; set; }
        public string Message { get; set; }
    }
}
