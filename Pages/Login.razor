@page "/"
@using System.ComponentModel.DataAnnotations
@layout LoginLayout
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<section class="bg-light p-3 p-md-4 p-xl-4">
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-12 col-xxl-11">
				<div class="card border-light-subtle shadow-sm">
					<div class="row g-0">
						<div class="col-12 col-md-6">
							<img class="img-fluid rounded-start w-100 h-100 object-fit-cover" loading="lazy" src="./assets/img/Login.jpg" alt="Welcome!">
						</div>
						<div class="col-12 col-md-6 d-flex align-items-center justify-content-center">
							<div class="col-12 col-lg-11 col-xl-10">
								<div class="card-body p-3 p-md-4 p-xl-5">
									<div class="row">
										<div class="col-12">
											<div class="mb-5">
												<div class="text-center mb-4">
													<a href="">
														<img src="./assets/img/Logo.jpg" alt="Logo" width="175" height="57">
													</a>
												</div>
												<h4 class="text-center">Welcome!</h4>
											</div>
										</div>
									</div>
									<EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                                        <DataAnnotationsValidator />
                                        <div class="row gy-3 overflow-hidden">
                                            <div class="col-12">
                                                <div class="form-floating mb-3">
                                                    <InputText class="form-control" id="username" @bind-Value="loginRequest.Username" placeholder="Username" required />
                                                    <label for="username" class="form-label">Username</label>
                                                    <ValidationMessage For="@(() => loginRequest.Username)" />
                                                </div>
                                            </div>
                                            <div class="col-12">
                                                <div class="form-floating mb-3">
													<InputText class="form-control" id="password" @bind-Value="loginRequest.Password" type="password" placeholder="Password" required />
													<label for="password" class="form-label">Password</label>
													<ValidationMessage For="@(() => loginRequest.Password)" />
                                                </div>
                                            </div>
                                            <div class="col-12">
                                                <div class="d-grid">
                                                    <button class="btn btn-dark btn-lg" type="submit">LOGIN</button>
                                                </div>
                                            </div>
                                        </div>
                                    </EditForm>
									<div class="row">
										<div class="col-12">
											<div class="d-flex gap-2 gap-md-4 flex-column flex-md-row justify-content-md-center mt-2">
												<a href="#!" class="link-secondary text-decoration-none">Forgot password</a>
											</div>
										</div>
									</div>
									@if (errorMessage != null)
									{
										<div class="alert alert-danger mt-3">@errorMessage</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>



@code {
	private LoginRequest loginRequest = new LoginRequest("", "");
	private string errorMessage = null;

	private async Task HandleLogin()
	{
		try
		{
			var response = await Http.PostAsJsonAsync($"{AppSettings.APIUrl}/auth/login", loginRequest);
			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
				if (result == null)
				{
					errorMessage = "Invalid username or password.";
					return;
				}
				else 
				{
					if (!result.IsSuccess) {
						errorMessage = result.Message;
						return;
					}
					await JSRuntime.InvokeVoidAsync("localStorage.setItem", "role", result.Role);
					if (result.Role == "Admin")
					{
						Navigation.NavigateTo("/admin/home");
					}
					else if (result.Role == "User")
					{
						Navigation.NavigateTo("/user/home");
					}
				}
			}
			else
			{
				errorMessage = "Invalid username or password.";
			}
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred: " + ex.Message;
		}
	}

	private class LoginRequest
	{
		[Required]
		public string Username { get; set; }

		[Required]
		[MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
		public string Password { get; set; }

		public LoginRequest(string username, string password)
		{
			Username = username;
			Password = password;
		}
	}

	private class LoginResponse
	{
		public bool IsSuccess { get; set; }
		public string Role { get; set; }
		public string Message { get; set; }
	}
}
